image 1/1 /home/leo/mts/src/coverage/Yolo/drone-detection-2-1/left0000.jpg: 384x640 2 drones, 55.0ms
Speed: 2.3ms preprocess, 55.0ms inference, 62.7ms postprocess per image at shape (1, 3, 384, 640)
results:  [ultralytics.engine.results.Results object with attributes:
boxes: ultralytics.engine.results.Boxes object
keypoints: None
masks: None
names: {0: 'drone'}
obb: None
orig_img: array([[[178, 178, 178],
        [178, 178, 178],
        [178, 178, 178],
        ...,
        [178, 178, 178],
        [178, 178, 178],
        [178, 178, 178]],
       [[178, 178, 178],
        [178, 178, 178],
        [178, 178, 178],
        ...,
        [178, 178, 178],
        [178, 178, 178],
        [178, 178, 178]],
       [[178, 178, 178],
        [178, 178, 178],
        [178, 178, 178],
        ...,
        [178, 178, 178],
        [178, 178, 178],
        [178, 178, 178]],
       ...,
       [[155, 155, 155],
        [155, 155, 155],
        [155, 155, 155],
        ...,
        [155, 155, 155],
        [155, 155, 155],
        [155, 155, 155]],
       [[155, 155, 155],
        [155, 155, 155],
        [155, 155, 155],
        ...,
        [155, 155, 155],
        [155, 155, 155],
        [155, 155, 155]],
       [[155, 155, 155],
        [155, 155, 155],
        [155, 155, 155],
        ...,
        [155, 155, 155],
        [155, 155, 155],
        [155, 155, 155]]], dtype=uint8)
orig_shape: (720, 1280)
path: '/home/leo/mts/src/coverage/Yolo/drone-detection-2-1/left0000.jpg'
probs: None
save_dir: 'runs/detect/track'
speed: {'preprocess': 2.342700958251953, 'inference': 54.95905876159668, 'postprocess': 62.73341178894043}]
Traceback (most recent call last):
  File "detect.py", line 44, in <module>
    print("id: ", result.name)
  File "/home/leo/.local/lib/python3.8/site-packages/ultralytics/utils/__init__.py", line 162, in __getattr__
    raise AttributeError(f"'{name}' object has no attribute '{attr}'. See valid attributes below.\n{self.__doc__}")
AttributeError: 'Results' object has no attribute 'name'. See valid attributes below.
    A class for storing and manipulating inference results.
    Attributes:
        orig_img (numpy.ndarray): Original image as a numpy array.
        orig_shape (tuple): Original image shape in (height, width) format.
        boxes (Boxes, optional): Object containing detection bounding boxes.
        masks (Masks, optional): Object containing detection masks.
        probs (Probs, optional): Object containing class probabilities for classification tasks.
        keypoints (Keypoints, optional): Object containing detected keypoints for each object.
        speed (dict): Dictionary of preprocess, inference, and postprocess speeds (ms/image).
        names (dict): Dictionary of class names.
        path (str): Path to the image file.
    Methods:
        update(boxes=None, masks=None, probs=None, obb=None): Updates object attributes with new detection results.
        cpu(): Returns a copy of the Results object with all tensors on CPU memory.
        numpy(): Returns a copy of the Results object with all tensors as numpy arrays.
        cuda(): Returns a copy of the Results object with all tensors on GPU memory.
        to(*args, **kwargs): Returns a copy of the Results object with tensors on a specified device and dtype.
        new(): Returns a new Results object with the same image, path, and names.
        plot(...): Plots detection results on an input image, returning an annotated image.
        show(): Show annotated results to screen.
        save(filename): Save annotated results to file.
        verbose(): Returns a log string for each task, detailing detections and classifications.
        save_txt(txt_file, save_conf=False): Saves detection results to a text file.
        save_crop(save_dir, file_name=Path("im.jpg")): Saves cropped detection images.
        tojson(normalize=False): Converts detection results to JSON format.
Traceback (most recent call last):
  File "detect.py", line 44, in <module>
    print("id: ", result.name)
  File "/home/leo/.local/lib/python3.8/site-packages/ultralytics/utils/__init__.py", line 162, in __getattr__
    raise AttributeError(f"'{name}' object has no attribute '{attr}'. See valid attributes below.\n{self.__doc__}")
AttributeError: 'Results' object has no attribute 'name'. See valid attributes below.
    A class for storing and manipulating inference results.
    Attributes:
        orig_img (numpy.ndarray): Original image as a numpy array.
        orig_shape (tuple): Original image shape in (height, width) format.
        boxes (Boxes, optional): Object containing detection bounding boxes.
        masks (Masks, optional): Object containing detection masks.
        probs (Probs, optional): Object containing class probabilities for classification tasks.
        keypoints (Keypoints, optional): Object containing detected keypoints for each object.
        speed (dict): Dictionary of preprocess, inference, and postprocess speeds (ms/image).
        names (dict): Dictionary of class names.
        path (str): Path to the image file.
    Methods:
        update(boxes=None, masks=None, probs=None, obb=None): Updates object attributes with new detection results.
        cpu(): Returns a copy of the Results object with all tensors on CPU memory.
        numpy(): Returns a copy of the Results object with all tensors as numpy arrays.
        cuda(): Returns a copy of the Results object with all tensors on GPU memory.
        to(*args, **kwargs): Returns a copy of the Results object with tensors on a specified device and dtype.
        new(): Returns a new Results object with the same image, path, and names.
        plot(...): Plots detection results on an input image, returning an annotated image.
        show(): Show annotated results to screen.
        save(filename): Save annotated results to file.
        verbose(): Returns a log string for each task, detailing detections and classifications.
        save_txt(txt_file, save_conf=False): Saves detection results to a text file.
        save_crop(save_dir, file_name=Path("im.jpg")): Saves cropped detection images.
